<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
     
    <!-- 打开spring中annotation支持 -->    
	<context:annotation-config/>
	<!-- spring去哪些包中找annotation -->
	<context:component-scan base-package="org.ssh.erp"></context:component-scan>
	
	<!-- 配置权限管理器 --> 
	<!-- <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		ref对应我们写的realm  MyShiro
		<property name="realm" ref="myRealm"/>
		 使用下面配置的缓存管理器
		<property name="cacheManager" ref="cacheManager"/>
	</bean> -->
	
	<!-- 获取ref对应的类 -->
	<!-- <bean id="myRealm" class="org.ssh.erp.shiro.MyRealm"/> -->
	
	<!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->  
   <!--  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">   
        调用我们配置的权限管理器   
        <property name="securityManager" ref="securityManager"/>   
        配置我们的登录请求地址   
        <property name="loginUrl" value="user/user_login"/>    
        配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址  
        <property name="successUrl" value="ep/main"/> 
        如果您请求的资源不再您的权限范围，则跳转到/403请求地址  
        <property name="unauthorizedUrl" value="/403"/>    
        权限配置  
        <property name="filterChainDefinitions">    
            <value>    
                anon表示此地址不需要任何权限即可访问  
                /static/**=anon  
                perms[user:query]表示访问此连接需要权限为user:query的用户  
                /user=perms[user:query]  
                roles[manager]表示访问此连接需要用户的角色为manager  
                /md/mainDevice_delete=roles[admin]  
                /user/del/**=roles[admin]  
                /user/edit/**=roles[manager]  
                所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login    
                /** = authc  
            </value>    
        </property>    
    </bean>  
      
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />    
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />   
       -->
	<!-- 连接数据库 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
        
    </bean>
    
    <!-- 导入链接数据库的用户名和密码等,classpath是src路径 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
    <!-- 开启HibernateTemplate，并且为其注入SessionFactory
    
	使用HibernateTemplate不太方便的就是要获取session得通过getSessionFactory()方法获取 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
    <!-- 创建sessionfactory 集成hibernate的session事务管理流程-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
        	<value>org.ssh.erp.model</value>
        </property>
        <property name="hibernateProperties">
            <props>
            	<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">false</prop>
            </props>
        </property>
    </bean>
    
    <!--配置事务 -->
    <bean id="transactionManager"
	    class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	    <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- 获取加入事务的横切点 -->
    <aop:config>
        <aop:pointcut id="allMethods"
                expression="execution(* org.ssh.erp.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods"/>
    </aop:config>
    
    <!-- 在规定的方法中，控制台输出运行日志 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>